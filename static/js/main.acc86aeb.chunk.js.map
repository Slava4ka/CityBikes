{"version":3,"sources":["components/Stations/Stations.module.scss","components/Companies/Companies.module.scss","components/common/MySpinner/MySpinner.module.scss","pages/MainPage.module.scss","store/companies/types.ts","store/companies/actions.ts","store/stations/types.ts","components/Companies/Companies.tsx","components/common/MySpinner/MySpinner.tsx","utils/reducersTransformations.ts","components/Stations/Stations.tsx","store/stations/actions.ts","pages/MainPage.tsx","App.tsx","serviceWorker.ts","store/companies/reducer.ts","utils/api.ts","store/companies/filter.ts","store/companies/sagas.ts","store/stations/filter.ts","store/stations/sagas.ts","store/stations/reducer.ts","store/index.ts","store/configureStore.ts","index.tsx"],"names":["module","exports","CompaniesActionsTypes","StationsActionTypes","fetchError","message","action","FETCH_ERROR","Companies","props","companies","fetchStations","setCurrentNetwork","useState","companyIndex","cityIndex","active","setActive","useEffect","name","onClickHandle","path","company","changeActive","Accordion","defaultActiveKey","map","Card","key","Header","Toggle","as","Button","variant","eventKey","toString","Collapse","Body","className","style","myList","myList__list","cities","city","cityId","myList__item","elementParams","stateParams","myList__active","onClick","country","MySpinner","Spinner","position","animation","findF","favoritesState","favorite","find","f","stationId","addOrRemove","newFavorite","filter","Stations","stationsLoading","stations","stationsError","currentNetwork","stationsFavorite","changeFavorite","stationsBox","stationsBox__info","bold","length","stationsBox__list","ListGroup","st","index","Item","id","stationsBox__listItem","heart","heart_active","size","stationsBox__emptyList","mapDispatchToProps","fetchCompanies","FETCH_REQUEST","companyId","CHANGE_FAVORITES","connect","stationsPersist","companiesLoading","loading","companiesData","data","companiesError","errors","stationsData","favorites","mainPage","Container","Row","Col","sm","md","lg","App","store","persistor","Boolean","window","location","hostname","match","initialState","undefined","companiesReducer","state","type","FETCH_SUCCESS","payload","a","fetch","method","headers","Accept","res","json","companyRequestFilter","_","networks","c","uc","r","i","getName","handleFetch","watchFetchRequest","companiesSaga","call","error","put","filterRes","Error","stack","takeEvery","all","fork","stationsRequestFilter","network","emptySlots","empty_slots","freeBikes","free_bikes","stationsSaga","stationsReducer","rootSaga","stationsPersistConfig","storage","whitelist","reducer","combineReducers","persistReducer","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","run","persistStore","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,YAAc,8BAA8B,kBAAoB,oCAAoC,kBAAoB,oCAAoC,sBAAwB,wCAAwC,uBAAyB,yCAAyC,KAAO,uBAAuB,MAAQ,wBAAwB,aAAe,iC,mBCA7XD,EAAOC,QAAU,CAAC,OAAS,0BAA0B,aAAe,gCAAgC,aAAe,gCAAgC,eAAiB,oC,mBCApKD,EAAOC,QAAU,CAAC,SAAW,8B,mBCA7BD,EAAOC,QAAU,CAAC,SAAW,6B,yHCDjBC,E,yGAAAA,K,0CAAAA,E,0CAAAA,E,uCAAAA,M,KCGL,ICHKC,EDSCC,EAAa,SAACC,GAAD,OACxBC,iBAAOJ,EAAsBK,YAAaF,I,yCE6F7BG,EAtF6B,SAACC,GAA2B,IAC9DC,EAAgDD,EAAhDC,UAAWC,EAAqCF,EAArCE,cAAeC,EAAsBH,EAAtBG,kBADmC,EAGzCC,mBAAsB,CAChDC,aAAc,EACdC,UAAW,IALwD,mBAG9DC,EAH8D,KAGtDC,EAHsD,KAQrEC,qBAAU,WACJR,EAAU,IACZE,EAAkBF,EAAU,GAAGS,QAEhC,IAEH,IAcMC,EAAgB,SACpBN,EACAC,EACAM,EACAC,GAEAX,EAAcU,GApBK,SAACP,EAAsBC,GAC1CE,EAAU,CAAEH,eAAcC,cAoB1BQ,CAAaT,EAAcC,GAC3BH,EAAkBU,IAGpB,OACE,6BACE,kBAACE,EAAA,EAAD,CAAWC,iBAAiB,KACzBf,EAAUgB,KAAI,SAACJ,EAASR,GAAV,OACb,kBAACa,EAAA,EAAD,CAAMC,IAAK,WAAad,GACtB,kBAACa,EAAA,EAAKE,OAAN,KACE,kBAACL,EAAA,EAAUM,OAAX,CACEC,GAAIC,IACJC,QAAQ,OACRC,SAAUpB,EAAaqB,YAEtBb,EAAQH,OAGb,kBAACK,EAAA,EAAUY,SAAX,CAAoBF,SAAUpB,EAAaqB,YACzC,kBAACR,EAAA,EAAKU,KAAN,CAAWC,UAAWC,IAAMC,QAC1B,wBAAIF,UAAWC,IAAME,cAClBnB,EAAQoB,OAAOhB,KAAI,SAACiB,EAAM5B,GAAP,OAClB,wBACEa,IAAKe,EAAKC,OAAS7B,EACnBuB,UAAS,UAAKC,IAAMM,aAAX,aAxC3BC,EAyCsC,CAAEhC,eAAcC,aAxCtDgC,EAwCmE/B,EArCjE8B,EAAchC,eAAiBiC,EAAYjC,cAC3CgC,EAAc/B,YAAcgC,EAAYhC,UAqClBwB,IAAMS,eACN,KAENC,QAAS,kBACP7B,EACEN,EACAC,EACA4B,EAAKC,OACLtB,EAAQH,QAIXwB,EAAKA,KAhBR,KAgBgBA,EAAKO,SAvDb,IACxBJ,EACAC,e,kDC7BWI,EAJa,WAC3B,OAAO,kBAACC,EAAA,EAAD,CAASd,UAAWC,IAAMc,SAAUC,UAAU,Y,gBCHzCC,EAAQ,SACnBC,EACAC,GAEA,QAASD,EAAeE,MACtB,SAAAC,GAAC,OAAIA,EAAExC,OAASsC,EAAStC,MAAQwC,EAAEC,YAAcH,EAASG,cAIjDC,EAAc,SACzBL,EACAM,GAEA,OAAIP,EAAMC,EAAgBM,GACjB,YACFN,EAAeO,QAChB,SAAAJ,GAAC,OACCA,EAAExC,OAAS2C,EAAY3C,MAAQwC,EAAEC,YAAcE,EAAYF,cAI3D,GAAN,mBAAWJ,GAAX,CAA2BM,KCoEhBE,EAzE2B,SAACvD,GAA0B,IAEjEwD,EAMExD,EANFwD,gBACAC,EAKEzD,EALFyD,SACAC,EAIE1D,EAJF0D,cACAC,EAGE3D,EAHF2D,eACAC,EAEE5D,EAFF4D,iBACAC,EACE7D,EADF6D,eAMF,OACE,yBAAKhC,UAAS,UAAKC,IAAMgC,cACtBN,EACC,kBAAC,EAAD,MACEE,EACF,6BAAMA,GAEN,6BACE,yBAAK7B,UAAWC,IAAMiC,mBACpB,6BACE,0BAAMlC,UAAWC,IAAMkC,MAAvB,qIAA6D,IAC5DL,GAEH,6BACE,0BAAM9B,UAAWC,IAAMkC,MAAvB,kOAEQ,IACPP,EAASQ,SAGbR,EAASQ,OAAS,EACjB,yBAAKpC,UAAWC,IAAMoC,mBACpB,kBAACC,EAAA,EAAD,KACGV,EAASxC,KAAI,SAACmD,EAAIC,GAAL,OACZ,kBAACF,EAAA,EAAUG,KAAX,CAAgBnD,IAAKkD,EAAM3C,WAAa0C,EAAGG,IACzC,yBAAK1C,UAAWC,IAAM0C,uBACnBJ,EAAG1D,KACJ,0BACEmB,UAAS,UAAKC,IAAM2C,MAAX,aA/BR/D,EAgCe0D,EAAG1D,KAhCJyC,EAgCUiB,EAAGjB,UA/BzCL,EAAMc,EAAkB,CAAElD,OAAMyC,cAgCbrB,IAAM4C,aACN,MAGN,kBAAC,IAAD,CACEC,KAAM,QACNnC,QAAS,kBACPqB,EAAe,CACbnD,KAAM0D,EAAG1D,KACTyC,UAAWiB,EAAGjB,kBA1CpB,IAACzC,EAAcyC,OAqD3B,yBAAKtB,UAAWC,IAAM8C,wBACpB,6I,SJlFFlF,K,yCAAAA,E,yCAAAA,E,qCAAAA,E,gDAAAA,M,KKGL,IAMMC,EAAa,SAACC,GAAD,OACxBC,iBAAOH,EAAoBI,YAAaF,I,iBC0FpCiF,EAAqB,CACzBC,ePlGmC,kBACnCjF,iBAAOJ,EAAsBsF,gBOkG7B7E,cDnGkC,SAAC8E,GAAD,OAClCnF,iBAAOH,EAAoBqF,cAAe,CAAEC,eCmG5CnB,eD3F4B,SAACb,GAAD,OAC5BnD,iBAAOH,EAAoBuF,iBAAkBjC,KC6FhCkC,eAhBS,SAAC,GAAD,IAAGjF,EAAH,EAAGA,UAAWkF,EAAd,EAAcA,gBAAd,MAAuD,CAC7EC,iBAAkBnF,EAAUoF,QAC5BC,cAAerF,EAAUsF,KACzBC,eAAgBvF,EAAUwF,OAC1BjC,gBAAiB2B,EAAgBE,QACjCK,aAAcP,EAAgBI,KAC9B3B,iBAAkBuB,EAAgBQ,UAClCjC,cAAeyB,EAAgBM,UASOZ,EAAzBK,EA3EsB,SAAClF,GAAqB,IAEvDoF,EAUEpF,EAVFoF,iBACAE,EASEtF,EATFsF,cACAE,EAQExF,EARFwF,eACAhC,EAOExD,EAPFwD,gBACAkC,EAME1F,EANF0F,aACA9B,EAKE5D,EALF4D,iBACAF,EAIE1D,EAJF0D,cACAoB,EAGE9E,EAHF8E,eACA5E,EAEEF,EAFFE,cACA2D,EACE7D,EADF6D,eAXsD,EAcZzD,mBAAiB,IAdL,mBAcjDuD,EAdiD,KAcjCxD,EAdiC,KA0BxD,OAVAM,qBAAU,WACRqE,MACC,IAEHrE,qBAAU,WACJ6E,EAAc,IAChBpF,EAAcoF,EAAc,GAAGrD,OAAO,GAAGE,UAE1C,IAGD,yBAAKN,UAAWC,IAAM8D,UACnBR,EACC,kBAAC,EAAD,MACEI,GAGF,kBAACK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GACtB,kBAAC,EAAD,CACEhG,cAAeA,EACfD,UAAWqF,EACXnF,kBAAmBA,KAGvB,kBAAC4F,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GACtB,kBAAC,EAAD,CACE1C,gBAAiBA,EACjBC,SAAUiC,EACVhC,cAAeA,EACfC,eAAgBA,EAChBC,iBAAkBA,EAClBC,eAAgBA,W,QCrDjBsC,EAZiB,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,UACxC,OACE,kBAAC,IAAD,CAAUD,MAAOA,GACf,kBAAC,IAAD,CAAaf,QAAS,kBAAC,EAAD,MAAegB,UAAWA,GAC9C,yBAAKxE,UAAU,OACb,kBAAC,EAAD,UCRUyE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4CCfOC,EAA+B,CAC1CpB,KAAM,GACNF,SAAS,EACTI,YAAQmB,GAuBKC,EApBmC,WAG5C,IAFJC,EAEG,uDAFKH,EACR9G,EACG,uCACH,OAAQA,EAAOkH,MACb,KAAKtH,EAAsBsF,cACzB,OAAO,eAAK+B,EAAZ,CAAmBzB,SAAS,IAE9B,KAAK5F,EAAsBuH,cACzB,OAAO,eAAKF,EAAZ,CAAmBzB,SAAS,EAAOE,KAAK,YAAK1F,EAAOoH,WAEtD,KAAKxH,EAAsBK,YACzB,OAAO,eAAKgH,EAAZ,CAAmBzB,SAAS,EAAOI,OAAQ5F,EAAOoH,UAEpD,QACE,OAAOH,I,eCrBN,SAAehC,IAAtB,+B,4CAAO,4BAAAoC,EAAA,sEACaC,MAAM,qCAAsC,CAC5DC,OAAQ,MACRC,QAAS,CACPC,OAAQ,sBAJP,cACCC,EADD,yBAOEA,EAAIC,QAPN,4C,sBAUA,SAAetH,EAAtB,kC,4CAAO,WACL8E,GADK,eAAAkC,EAAA,sEAGaC,MAAM,sCAAD,OAAuCnC,GAAa,CACzEoC,OAAQ,MACRC,QAAS,CACPC,OAAQ,sBANP,cAGCC,EAHD,yBASEA,EAAIC,QATN,4C,4CCTMC,GAAuB,SAAClC,GAOnC,OANiBmC,QAAOnC,EAAKoC,SAAS1G,KAAI,SAAA2G,GAAC,uBAAIA,EAAE/G,eAAN,aAAI,EAAWa,eAEtBT,KAAI,SAAA4G,GACtC,OAAOtC,EAAKoC,SAASrE,QAAO,SAAAsE,GAAC,aAAIC,KAAE,UAAKD,EAAE/G,eAAP,aAAK,EAAWa,kBAG3BT,KAAI,SAAC6G,EAAGC,GAAO,IAAD,EAChCrH,EAAI,UAAGoH,EAAE,GAAGjH,eAAR,aAAG,EAAca,WACrBO,EAAS6F,EAAE7G,KAAI,SAAA2G,GACnB,MAAO,CACL1F,KAAM0F,EAAEpB,SAAStE,KACjBC,OAAQyF,EAAErD,GACV9B,QAASuF,mBAAQJ,EAAEpB,SAAS/D,UAAYmF,EAAEpB,SAAS/D,YAIvD,MAAO,CACL8B,GAAIwD,EACJrH,MAAU,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMuD,QAAS,EAAIvD,EAAO,oBAChCuB,OAAQA,O,YCjBJgG,I,YAmBAC,I,YAIAC,IAvBV,SAAUF,KAAV,yEAEgB,OAFhB,kBAEsBG,YAAKtD,GAF3B,YAEUyC,EAFV,QAIYc,MAJZ,gBAKM,OALN,SAKYC,YAAI3I,EAAW4H,EAAIc,QAL/B,8BAOwB,OAPxB,UAO8BD,YAAKX,GAAsBF,GAPzD,QAQM,OADMgB,EAPZ,iBAQYD,abTiB/C,EaSAgD,EbR3B1I,iBAAOJ,EAAsBuH,cAAezB,KaA9C,+DAWQ,gBAAaiD,OAAS,KAAEC,OAXhC,iBAYM,OAZN,UAYYH,YAAI3I,EAAW,KAAE8I,QAZ7B,gCAcM,OAdN,UAcYH,YAAI3I,EAAW,+BAd3B,kCbD4B,IAAC4F,IaC7B,kBAmBA,SAAU2C,KAAV,iEACE,OADF,SACQQ,YAAUjJ,EAAsBsF,cAAekD,IADvD,wCAIA,SAAUE,KAAV,iEACE,OADF,SACQQ,YAAI,CAACC,YAAKV,MADlB,wCAIeC,UChCFU,GAAwB,SAACtD,GACpC,OAAIA,EAAKuD,QAAQrF,SACR8B,EAAKuD,QAAQrF,SAASxC,KAAI,SAACmD,EAAIC,GACpC,MAAO,CACLE,GAAIF,EACJ3D,KAAM0D,EAAG1D,KACTyC,UAAWiB,EAAGG,GACdwE,WAAY3E,EAAG4E,YACfC,UAAW7E,EAAG8E,eAIX,I,YCRDjB,I,YAoBAC,I,YAIAiB,IAxBV,SAAUlB,GAAV,8EAIgB,OAHHjD,EADb,EACEiC,QAAWjC,UADb,kBAIsBoD,YAAKlI,EAAe8E,GAJ1C,YAIUuC,EAJV,QAKYc,MALZ,iBAMM,OANN,SAMYC,YAAI3I,EAAW4H,EAAIc,QAN/B,+BAQwB,OARxB,UAQ8BD,YAAKS,GAAuBtB,GAR1D,QASM,OADMgB,EARZ,iBASYD,aTTiB/C,ESSAgD,ETR3B1I,iBAAOH,EAAoBsH,cAAezB,KSD5C,+DAYQ,gBAAaiD,OAAS,KAAEC,OAZhC,iBAaM,OAbN,UAaYH,YAAI3I,EAAW,KAAE8I,QAb7B,gCAeM,OAfN,UAeYH,YAAI3I,EAAW,8BAf3B,kCTA4B,IAAC4F,ISA7B,kBAoBA,SAAU2C,KAAV,iEACE,OADF,SACQQ,YAAUhJ,EAAoBqF,cAAekD,IADrD,wCAIA,SAAUkB,KAAV,iEACE,OADF,SACQR,YAAI,CAACC,YAAKV,MADlB,wCAIeiB,UC9BFxC,GAA+B,CAC1CtB,SAAS,EACTE,KAAM,GACNI,UAAW,GACXF,YAAQmB,GA6BKwC,GA1BkC,WAG3C,IAFJtC,EAEG,uDAFKH,GACR9G,EACG,uCACH,OAAQA,EAAOkH,MACb,KAAKrH,EAAoBqF,cACvB,OAAO,eAAK+B,EAAZ,CAAmBzB,SAAS,IAE9B,KAAK3F,EAAoBsH,cACvB,OAAO,eAAKF,EAAZ,CAAmBzB,SAAS,EAAOE,KAAK,YAAK1F,EAAOoH,WAEtD,KAAKvH,EAAoBI,YACvB,OAAO,eAAKgH,EAAZ,CAAmBzB,SAAS,EAAOI,OAAQ5F,EAAOoH,UAEpD,KAAKvH,EAAoBuF,iBACvB,OAAO,eACF6B,EADL,CAEEnB,UAAWvC,EAAY0D,EAAMnB,UAAW9F,EAAOoH,WAGnD,QACE,OAAOH,I,yCCLIuC,IAhBXC,GAAwB,CAC5BnI,IAAK,gBACLoI,aACAC,UAAW,CAAC,cAQDC,GAAUC,0BAAgB,CACrCzJ,UAAW4G,EACX1B,gBAAiBwE,aAAeL,GAAuBF,MAGlD,SAAUC,KAAV,iEACL,OADK,SACCV,YAAI,CAACC,YAAKT,IAAgBS,YAAKO,MADhC,wC,oBCfQ,WACb,IAAMS,EAAmBC,+BAAoB,IACvCC,EAAiBC,cAEjB3D,EAAQ4D,sBACZP,GACAG,EAAiBK,0BAAgBH,KAMnC,OAHAA,EAAeI,IAAIb,IAGZ,CAAEjD,QAAOC,UADE8D,aAAa/D,IChBJgE,GAArBhE,G,GAAAA,MAAOC,G,GAAAA,UAEfgE,IAASC,OACP,kBAAC,EAAD,CAAKlE,MAAOA,GAAOC,UAAWA,KAC9BkE,SAASC,eAAe,SVgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.acc86aeb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"stationsBox\":\"Stations_stationsBox__3WKSc\",\"stationsBox__info\":\"Stations_stationsBox__info__113Lv\",\"stationsBox__list\":\"Stations_stationsBox__list__1b_e1\",\"stationsBox__listItem\":\"Stations_stationsBox__listItem__1njcw\",\"stationsBox__emptyList\":\"Stations_stationsBox__emptyList__ZFHae\",\"bold\":\"Stations_bold__23_Me\",\"heart\":\"Stations_heart__1t1Zn\",\"heart_active\":\"Stations_heart_active__1oCe1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myList\":\"Companies_myList__1feai\",\"myList__list\":\"Companies_myList__list__1nfvc\",\"myList__item\":\"Companies_myList__item__2MKRi\",\"myList__active\":\"Companies_myList__active__3nfdB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"position\":\"MySpinner_position__2JLZS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainPage\":\"MainPage_mainPage__3AdWn\"};","export enum CompaniesActionsTypes {\r\n  FETCH_REQUEST = '@@companies/FETCH_REQUEST',\r\n  FETCH_SUCCESS = '@@companies/FETCH_SUCCESS',\r\n  FETCH_ERROR = '@@companies/FETCH_ERROR'\r\n}\r\n\r\ninterface City {\r\n  city: string\r\n  cityId: string\r\n  country: string\r\n}\r\n\r\nexport interface Company {\r\n  id: number\r\n  name: string\r\n  cities: City[]\r\n}\r\n\r\nexport interface CompaniesState {\r\n  readonly loading: boolean\r\n  readonly data: Company[]\r\n  readonly errors?: string\r\n}\r\n\r\n// For request result\r\n\r\ninterface Location {\r\n  city: string\r\n  country: string\r\n  latitude: number\r\n  longitude: number\r\n}\r\n\r\ninterface License {\r\n  name: string\r\n  url: string\r\n}\r\n\r\ninterface Network {\r\n  company: string[]\r\n  href: string\r\n  id: string\r\n  location: Location\r\n  name: string\r\n  source: string\r\n  gbfs_href: string\r\n  license?: License\r\n}\r\n\r\nexport interface CompaniesObject {\r\n  networks: Network[]\r\n}\r\n","import { action } from 'typesafe-actions'\r\nimport { CompaniesActionsTypes, Company } from './types'\r\n\r\nexport const companiesFetchRequest = () =>\r\n  action(CompaniesActionsTypes.FETCH_REQUEST)\r\n\r\nexport const fetchSuccess = (data: Company[]) =>\r\n  action(CompaniesActionsTypes.FETCH_SUCCESS, data)\r\n\r\nexport const fetchError = (message: string) =>\r\n  action(CompaniesActionsTypes.FETCH_ERROR, message)\r\n","export enum StationsActionTypes {\r\n  FETCH_REQUEST = '@@stations/FETCH_REQUEST',\r\n  FETCH_SUCCESS = '@@stations/FETCH_SUCCESS',\r\n  FETCH_ERROR = '@@stations/FETCH_ERROR',\r\n  CHANGE_FAVORITES = '@@stations/CHANGE_FAVORITES'\r\n}\r\n\r\nexport interface MyStation {\r\n  id: number\r\n  name: string\r\n  stationId: string\r\n  emptySlots: number\r\n  freeBikes: number\r\n}\r\n\r\nexport interface Favorite {\r\n  name: string\r\n  stationId: string\r\n}\r\n\r\nexport interface MyStationState {\r\n  readonly loading: boolean\r\n  readonly data: MyStation[]\r\n  readonly favorites: Favorite[]\r\n  readonly errors?: string\r\n}\r\n\r\n// For request result\r\n\r\nexport interface Location {\r\n  city: string\r\n  country: string\r\n  latitude: number\r\n  longitude: number\r\n}\r\n\r\nexport interface Extra {\r\n  bike_uids: string[]\r\n  number: string\r\n  slots: number\r\n  uid: string\r\n}\r\n\r\nexport interface Station {\r\n  empty_slots: number\r\n  extra: Extra\r\n  free_bikes: number\r\n  id: string\r\n  latitude: number\r\n  longitude: number\r\n  name: string\r\n  timestamp: Date\r\n}\r\n\r\nexport interface Network {\r\n  company: string[]\r\n  href: string\r\n  id: string\r\n  location: Location\r\n  name: string\r\n  stations?: Station[]\r\n}\r\n\r\nexport interface StationsObject {\r\n  network: Network\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport style from './Companies.module.scss'\r\nimport { Company } from '../../store/companies/types'\r\nimport { Accordion, Card, Button } from 'react-bootstrap'\r\nimport { stationsFetchRequest } from '../../store/stations/actions'\r\n\r\ninterface CompaniesProps {\r\n  companies: Company[]\r\n  fetchStations: typeof stationsFetchRequest\r\n  setCurrentNetwork: (value: string) => void\r\n}\r\n\r\ninterface StateActive {\r\n  companyIndex: number\r\n  cityIndex: number\r\n}\r\n\r\nconst Companies: React.FC<CompaniesProps> = (props: CompaniesProps) => {\r\n  const { companies, fetchStations, setCurrentNetwork } = props\r\n\r\n  const [active, setActive] = useState<StateActive>({\r\n    companyIndex: 0,\r\n    cityIndex: 0\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (companies[0]) {\r\n      setCurrentNetwork(companies[0].name)\r\n    }\r\n  }, [])\r\n\r\n  const changeActive = (companyIndex: number, cityIndex: number) => {\r\n    setActive({ companyIndex, cityIndex })\r\n  }\r\n\r\n  const checkActiveStatus = (\r\n    elementParams: StateActive,\r\n    stateParams: StateActive\r\n  ): boolean => {\r\n    return !!(\r\n      elementParams.companyIndex === stateParams.companyIndex &&\r\n      elementParams.cityIndex === stateParams.cityIndex\r\n    )\r\n  }\r\n\r\n  const onClickHandle = (\r\n    companyIndex: number,\r\n    cityIndex: number,\r\n    path: string,\r\n    company: string\r\n  ) => {\r\n    fetchStations(path)\r\n    changeActive(companyIndex, cityIndex)\r\n    setCurrentNetwork(company)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Accordion defaultActiveKey=\"0\">\r\n        {companies.map((company, companyIndex) => (\r\n          <Card key={'company_' + companyIndex}>\r\n            <Card.Header>\r\n              <Accordion.Toggle\r\n                as={Button}\r\n                variant=\"link\"\r\n                eventKey={companyIndex.toString()}\r\n              >\r\n                {company.name}\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse eventKey={companyIndex.toString()}>\r\n              <Card.Body className={style.myList}>\r\n                <ul className={style.myList__list}>\r\n                  {company.cities.map((city, cityIndex) => (\r\n                    <li\r\n                      key={city.cityId + cityIndex}\r\n                      className={`${style.myList__item} ${\r\n                        checkActiveStatus({ companyIndex, cityIndex }, active)\r\n                          ? style.myList__active\r\n                          : ''\r\n                      }`}\r\n                      onClick={(): void =>\r\n                        onClickHandle(\r\n                          companyIndex,\r\n                          cityIndex,\r\n                          city.cityId,\r\n                          company.name\r\n                        )\r\n                      }\r\n                    >\r\n                      {city.city}, {city.country}\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        ))}\r\n      </Accordion>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Companies\r\n","import React from 'react'\r\nimport style from './MySpinner.module.scss'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n\r\nconst MySpinner: React.FC = () => {\r\n\treturn <Spinner className={style.position} animation=\"border\" />\r\n}\r\n\r\nexport default MySpinner\r\n","import { Favorite } from '../store/stations/types'\r\n\r\nexport const findF = (\r\n  favoritesState: Favorite[],\r\n  favorite: Favorite\r\n): boolean => {\r\n  return !!favoritesState.find(\r\n    f => f.name === favorite.name && f.stationId === favorite.stationId\r\n  )\r\n}\r\n\r\nexport const addOrRemove = (\r\n  favoritesState: Favorite[],\r\n  newFavorite: Favorite\r\n): Favorite[] => {\r\n  if (findF(favoritesState, newFavorite)) {\r\n    return [\r\n      ...favoritesState.filter(\r\n        f =>\r\n          f.name !== newFavorite.name && f.stationId !== newFavorite.stationId\r\n      )\r\n    ]\r\n  } else {\r\n    return [...favoritesState, newFavorite]\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Favorite, MyStation } from '../../store/stations/types'\r\nimport style from './Stations.module.scss'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport MySpinner from '../common/MySpinner/MySpinner'\r\nimport { FaHeart } from 'react-icons/fa'\r\nimport { changeFavorite } from '../../store/stations/actions'\r\nimport { findF } from '../../utils/reducersTransformations'\r\n\r\ninterface StationsProps {\r\n  stationsLoading: boolean\r\n  stations: MyStation[]\r\n  stationsError?: string\r\n  currentNetwork: string\r\n  stationsFavorite: Favorite[]\r\n  changeFavorite: typeof changeFavorite\r\n}\r\n\r\nconst Stations: React.FC<StationsProps> = (props: StationsProps) => {\r\n  const {\r\n    stationsLoading,\r\n    stations,\r\n    stationsError,\r\n    currentNetwork,\r\n    stationsFavorite,\r\n    changeFavorite\r\n  } = props\r\n\r\n  const favoriteCheck = (name: string, stationId: string): boolean => {\r\n    return findF(stationsFavorite, { name, stationId })\r\n  }\r\n  return (\r\n    <div className={`${style.stationsBox}`}>\r\n      {stationsLoading ? (\r\n        <MySpinner />\r\n      ) : stationsError ? (\r\n        <div>{stationsError}</div>\r\n      ) : (\r\n        <div>\r\n          <div className={style.stationsBox__info}>\r\n            <div>\r\n              <span className={style.bold}>Название выбранной сети:</span>{' '}\r\n              {currentNetwork}\r\n            </div>\r\n            <div>\r\n              <span className={style.bold}>\r\n                Общее количество станции в выбранной сети:\r\n              </span>{' '}\r\n              {stations.length}\r\n            </div>\r\n          </div>\r\n          {stations.length > 0 ? (\r\n            <div className={style.stationsBox__list}>\r\n              <ListGroup>\r\n                {stations.map((st, index) => (\r\n                  <ListGroup.Item key={index.toString() + st.id}>\r\n                    <div className={style.stationsBox__listItem}>\r\n                      {st.name}\r\n                      <span\r\n                        className={`${style.heart} ${\r\n                          favoriteCheck(st.name, st.stationId)\r\n                            ? style.heart_active\r\n                            : ''\r\n                        }`}\r\n                      >\r\n                        <FaHeart\r\n                          size={'1.3em'}\r\n                          onClick={() =>\r\n                            changeFavorite({\r\n                              name: st.name,\r\n                              stationId: st.stationId\r\n                            })\r\n                          }\r\n                        />\r\n                      </span>\r\n                    </div>\r\n                  </ListGroup.Item>\r\n                ))}\r\n              </ListGroup>\r\n            </div>\r\n          ) : (\r\n            <div className={style.stationsBox__emptyList}>\r\n              <h2>Список станций пуст</h2>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Stations\r\n","import { action } from 'typesafe-actions'\r\nimport { Favorite, MyStation, StationsActionTypes } from './types'\r\n\r\nexport const stationsFetchRequest = (companyId: string) =>\r\n  action(StationsActionTypes.FETCH_REQUEST, { companyId })\r\n\r\nexport const fetchSuccess = (data: MyStation[]) =>\r\n  action(StationsActionTypes.FETCH_SUCCESS, data)\r\n\r\nexport const fetchError = (message: string) =>\r\n  action(StationsActionTypes.FETCH_ERROR, message)\r\n\r\nexport const changeFavorite = (favorite: Favorite) =>\r\n  action(StationsActionTypes.CHANGE_FAVORITES, favorite)\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Col, Container, Row } from 'react-bootstrap'\r\nimport { Company } from '../store/companies/types'\r\nimport { companiesFetchRequest } from '../store/companies/actions'\r\nimport { connect } from 'react-redux'\r\nimport { ApplicationState } from '../store'\r\nimport Companies from '../components/Companies/Companies'\r\nimport Stations from '../components/Stations/Stations'\r\nimport MySpinner from '../components/common/MySpinner/MySpinner'\r\nimport { stationsFetchRequest, changeFavorite } from '../store/stations/actions'\r\nimport { Favorite, MyStation } from '../store/stations/types'\r\nimport style from './MainPage.module.scss'\r\n\r\ninterface PropsFromState {\r\n  companiesLoading: boolean\r\n  companiesData: Company[]\r\n  companiesError?: string\r\n  stationsLoading: boolean\r\n  stationsData: MyStation[]\r\n  stationsFavorite: Favorite[]\r\n  stationsError?: string\r\n}\r\n\r\ninterface PropsFromDispatch {\r\n  fetchCompanies: typeof companiesFetchRequest\r\n  fetchStations: typeof stationsFetchRequest\r\n  changeFavorite: typeof changeFavorite\r\n}\r\n\r\ntype AllProps = PropsFromState & PropsFromDispatch\r\n\r\nconst MainPage: React.FC<AllProps> = (props: AllProps) => {\r\n  const {\r\n    companiesLoading,\r\n    companiesData,\r\n    companiesError,\r\n    stationsLoading,\r\n    stationsData,\r\n    stationsFavorite,\r\n    stationsError,\r\n    fetchCompanies,\r\n    fetchStations,\r\n    changeFavorite\r\n  } = props\r\n\r\n  const [currentNetwork, setCurrentNetwork] = useState<string>('')\r\n\r\n  useEffect(() => {\r\n    fetchCompanies()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (companiesData[0]) {\r\n      fetchStations(companiesData[0].cities[0].cityId)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className={style.mainPage}>\r\n      {companiesLoading ? (\r\n        <MySpinner />\r\n      ) : companiesError ? (\r\n        companiesError\r\n      ) : (\r\n        <Container>\r\n          <Row>\r\n            <Col sm={12} md={6} lg={6}>\r\n              <Companies\r\n                fetchStations={fetchStations}\r\n                companies={companiesData}\r\n                setCurrentNetwork={setCurrentNetwork}\r\n              />\r\n            </Col>\r\n            <Col sm={12} md={6} lg={6}>\r\n              <Stations\r\n                stationsLoading={stationsLoading}\r\n                stations={stationsData}\r\n                stationsError={stationsError}\r\n                currentNetwork={currentNetwork}\r\n                stationsFavorite={stationsFavorite}\r\n                changeFavorite={changeFavorite}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = ({ companies, stationsPersist }: ApplicationState) => ({\r\n  companiesLoading: companies.loading,\r\n  companiesData: companies.data,\r\n  companiesError: companies.errors,\r\n  stationsLoading: stationsPersist.loading,\r\n  stationsData: stationsPersist.data,\r\n  stationsFavorite: stationsPersist.favorites,\r\n  stationsError: stationsPersist.errors\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  fetchCompanies: companiesFetchRequest,\r\n  fetchStations: stationsFetchRequest,\r\n  changeFavorite: changeFavorite\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainPage)\r\n","import React from 'react'\nimport './App.css'\nimport { Store } from 'redux'\nimport { ApplicationState } from './store'\nimport { Provider } from 'react-redux'\nimport MainPage from './pages/MainPage'\nimport { Persistor } from 'redux-persist/es/types'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport MySpinner from './components/common/MySpinner/MySpinner'\n\ninterface AppProps {\n  store: Store<ApplicationState>\n  persistor: Persistor\n}\n\nconst App: React.FC<AppProps> = ({ store, persistor }: AppProps) => {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={<MySpinner />} persistor={persistor}>\n        <div className=\"App\">\n          <MainPage />\n        </div>\n      </PersistGate>\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Reducer } from 'redux'\r\nimport { CompaniesActionsTypes, CompaniesState } from './types'\r\n\r\nexport const initialState: CompaniesState = {\r\n  data: [],\r\n  loading: false,\r\n  errors: undefined\r\n}\r\n\r\nconst companiesReducer: Reducer<CompaniesState> = (\r\n  state = initialState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case CompaniesActionsTypes.FETCH_REQUEST: {\r\n      return { ...state, loading: true }\r\n    }\r\n    case CompaniesActionsTypes.FETCH_SUCCESS: {\r\n      return { ...state, loading: false, data: [...action.payload] }\r\n    }\r\n    case CompaniesActionsTypes.FETCH_ERROR: {\r\n      return { ...state, loading: false, errors: action.payload }\r\n    }\r\n    default: {\r\n      return state\r\n    }\r\n  }\r\n}\r\n\r\nexport default companiesReducer\r\n","import { CompaniesObject } from '../store/companies/types'\r\nimport { StationsObject } from '../store/stations/types'\r\n\r\nexport async function fetchCompanies(): Promise<CompaniesObject> {\r\n  const res = await fetch('https://api.citybik.es/v2/networks', {\r\n    method: 'get',\r\n    headers: {\r\n      Accept: 'application/json'\r\n    }\r\n  })\r\n  return res.json()\r\n}\r\n\r\nexport async function fetchStations(\r\n  companyId: string\r\n): Promise<StationsObject> {\r\n  const res = await fetch(`https://api.citybik.es/v2/networks/${companyId}`, {\r\n    method: 'get',\r\n    headers: {\r\n      Accept: 'application/json'\r\n    }\r\n  })\r\n  return res.json()\r\n}\r\n","import { Company, CompaniesObject } from './types'\r\nimport * as _ from 'lodash'\r\nimport { getName } from 'country-list'\r\n\r\nexport const companyRequestFilter = (data: CompaniesObject): Company[] => {\r\n  const uniqTemp = _.uniq(data.networks.map(c => c.company?.toString()))\r\n\r\n  const withoutDuplication = uniqTemp.map(uc => {\r\n    return data.networks.filter(c => uc === c.company?.toString())\r\n  })\r\n\r\n  return withoutDuplication.map((r, i) => {\r\n    const name = r[0].company?.toString()\r\n    const cities = r.map(c => {\r\n      return {\r\n        city: c.location.city,\r\n        cityId: c.id,\r\n        country: getName(c.location.country) || c.location.country\r\n      }\r\n    })\r\n\r\n    return {\r\n      id: i,\r\n      name: name?.length > 0 ? name : 'Anonymous network',\r\n      cities: cities\r\n    }\r\n  })\r\n}\r\n","import { all, call, fork, put, takeEvery } from 'redux-saga/effects'\r\n\r\nimport { fetchCompanies } from '../../utils/api'\r\nimport { fetchError, fetchSuccess } from './actions'\r\nimport { CompaniesActionsTypes } from './types'\r\nimport { companyRequestFilter } from './filter'\r\n\r\nfunction* handleFetch() {\r\n  try {\r\n    const res = yield call(fetchCompanies)\r\n\r\n    if (res.error) {\r\n      yield put(fetchError(res.error))\r\n    } else {\r\n      const filterRes = yield call(companyRequestFilter, res)\r\n      yield put(fetchSuccess(filterRes))\r\n    }\r\n  } catch (e) {\r\n    if (e instanceof Error && e.stack) {\r\n      yield put(fetchError(e.stack))\r\n    } else {\r\n      yield put(fetchError('An unknown error occurred.'))\r\n    }\r\n  }\r\n}\r\n\r\nfunction* watchFetchRequest() {\r\n  yield takeEvery(CompaniesActionsTypes.FETCH_REQUEST, handleFetch)\r\n}\r\n\r\nfunction* companiesSaga() {\r\n  yield all([fork(watchFetchRequest)])\r\n}\r\n\r\nexport default companiesSaga\r\n","import { MyStation, StationsObject } from './types'\r\n\r\nexport const stationsRequestFilter = (data: StationsObject): MyStation[] => {\r\n  if (data.network.stations) {\r\n    return data.network.stations.map((st, index) => {\r\n      return {\r\n        id: index,\r\n        name: st.name,\r\n        stationId: st.id,\r\n        emptySlots: st.empty_slots,\r\n        freeBikes: st.free_bikes\r\n      }\r\n    })\r\n  } else {\r\n    return []\r\n  }\r\n}\r\n","import { all, call, fork, put, takeEvery } from 'redux-saga/effects'\r\nimport { fetchStations } from '../../utils/api'\r\nimport { fetchError, stationsFetchRequest, fetchSuccess } from './actions'\r\nimport { StationsActionTypes } from './types'\r\nimport { stationsRequestFilter } from './filter'\r\n\r\nfunction* handleFetch({\r\n  payload: { companyId }\r\n}: ReturnType<typeof stationsFetchRequest>) {\r\n  try {\r\n    const res = yield call(fetchStations, companyId)\r\n    if (res.error) {\r\n      yield put(fetchError(res.error))\r\n    } else {\r\n      const filterRes = yield call(stationsRequestFilter, res)\r\n      yield put(fetchSuccess(filterRes))\r\n    }\r\n  } catch (e) {\r\n    if (e instanceof Error && e.stack) {\r\n      yield put(fetchError(e.stack))\r\n    } else {\r\n      yield put(fetchError('An unknown error occured.'))\r\n    }\r\n  }\r\n}\r\n\r\nfunction* watchFetchRequest() {\r\n  yield takeEvery(StationsActionTypes.FETCH_REQUEST, handleFetch)\r\n}\r\n\r\nfunction* stationsSaga() {\r\n  yield all([fork(watchFetchRequest)])\r\n}\r\n\r\nexport default stationsSaga\r\n","import { MyStationState, StationsActionTypes } from './types'\r\nimport { Reducer } from 'redux'\r\nimport { addOrRemove } from '../../utils/reducersTransformations'\r\n\r\nexport const initialState: MyStationState = {\r\n  loading: false,\r\n  data: [],\r\n  favorites: [],\r\n  errors: undefined\r\n}\r\n\r\nconst stationsReducer: Reducer<MyStationState> = (\r\n  state = initialState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case StationsActionTypes.FETCH_REQUEST: {\r\n      return { ...state, loading: true }\r\n    }\r\n    case StationsActionTypes.FETCH_SUCCESS: {\r\n      return { ...state, loading: false, data: [...action.payload] }\r\n    }\r\n    case StationsActionTypes.FETCH_ERROR: {\r\n      return { ...state, loading: false, errors: action.payload }\r\n    }\r\n    case StationsActionTypes.CHANGE_FAVORITES: {\r\n      return {\r\n        ...state,\r\n        favorites: addOrRemove(state.favorites, action.payload)\r\n      }\r\n    }\r\n    default: {\r\n      return state\r\n    }\r\n  }\r\n}\r\n\r\nexport default stationsReducer\r\n","import { CompaniesState } from './companies/types'\r\nimport { combineReducers } from 'redux'\r\nimport companiesReducer from './companies/reducer'\r\nimport companiesSaga from './companies/sagas'\r\nimport { all, fork } from 'redux-saga/effects'\r\nimport stationsSaga from './stations/sagas'\r\nimport stationsReducer from './stations/reducer'\r\nimport { MyStationState } from './stations/types'\r\nimport { persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nconst stationsPersistConfig = {\r\n  key: 'stationsStore',\r\n  storage,\r\n  whitelist: ['favorites']\r\n}\r\n\r\nexport interface ApplicationState {\r\n  companies: CompaniesState\r\n  stationsPersist: MyStationState\r\n}\r\n\r\nexport const reducer = combineReducers({\r\n  companies: companiesReducer,\r\n  stationsPersist: persistReducer(stationsPersistConfig, stationsReducer)\r\n})\r\n\r\nexport function* rootSaga() {\r\n  yield all([fork(companiesSaga), fork(stationsSaga)])\r\n}\r\n","import { Store, createStore, applyMiddleware } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { ApplicationState, reducer, rootSaga } from '.'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { persistStore } from 'redux-persist'\r\nimport { Persistor } from 'redux-persist/es/types'\r\n\r\ninterface ConfigureStoreReturn {\r\n  store: Store<ApplicationState>\r\n  persistor: Persistor\r\n}\r\n\r\nexport default function configureStore(): ConfigureStoreReturn {\r\n  const composeEnhancers = composeWithDevTools({})\r\n  const sagaMiddleware = createSagaMiddleware()\r\n\r\n  const store = createStore(\r\n    reducer,\r\n    composeEnhancers(applyMiddleware(sagaMiddleware))\r\n  )\r\n\r\n  sagaMiddleware.run(rootSaga)\r\n\r\n  const persistor = persistStore(store)\r\n  return { store, persistor }\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport configureStore from './store/configureStore'\n\nconst { store, persistor } = configureStore()\n\nReactDOM.render(\n  <App store={store} persistor={persistor} />,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}